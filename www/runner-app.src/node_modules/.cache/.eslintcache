[{"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\index.tsx":"1","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\Router.tsx":"2","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Login.tsx":"3","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\index.tsx":"4","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\index.tsx":"5","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\ManageTeam\\index.tsx":"6","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\InsertRow.tsx":"7","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\ManageTeam\\ConfirmationWindow.tsx":"8","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\TableRow.tsx":"9","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\index.tsx":"10","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\App.tsx":"11","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\components\\Header.tsx":"12","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\common\\providers\\DataProvider.tsx":"13","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\common\\hooks\\useData.ts":"14","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\BeforeStart.tsx":"15","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\BeforeRace.tsx":"16","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\AfterStart.tsx":"17"},{"size":400,"mtime":1681324732890,"results":"18","hashOfConfig":"19"},{"size":312,"mtime":1681325336448,"results":"20","hashOfConfig":"19"},{"size":1521,"mtime":1681326490876,"results":"21","hashOfConfig":"19"},{"size":2299,"mtime":1681402254977,"results":"22","hashOfConfig":"19"},{"size":2299,"mtime":1681398516183,"results":"23","hashOfConfig":"19"},{"size":4487,"mtime":1681402543355,"results":"24","hashOfConfig":"19"},{"size":2701,"mtime":1681402658467,"results":"25","hashOfConfig":"19"},{"size":1613,"mtime":1681402408646,"results":"26","hashOfConfig":"19"},{"size":3507,"mtime":1681402651589,"results":"27","hashOfConfig":"19"},{"size":421,"mtime":1681406225915,"results":"28","hashOfConfig":"29"},{"size":1164,"mtime":1681499191413,"results":"30","hashOfConfig":"29"},{"size":317,"mtime":1681412186932,"results":"31","hashOfConfig":"29"},{"size":3159,"mtime":1681505014090,"results":"32","hashOfConfig":"29"},{"size":203,"mtime":1681406272220,"results":"33","hashOfConfig":"29"},{"size":870,"mtime":1681505045155,"results":"34","hashOfConfig":"29"},{"size":7770,"mtime":1681505616839,"results":"35","hashOfConfig":"29"},{"size":11709,"mtime":1681568538728,"results":"36","hashOfConfig":"29"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hs0zaj",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"l7s2mb",{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\index.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\Router.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Login.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\index.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\index.tsx",["94","95"],[],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport TableRow from \"./TableRow\";\r\nimport InsertRow from \"./InsertRow\";\r\n\r\ntype Props = {\r\n  teamId: number;\r\n};\r\n\r\nexport type Runner = {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  speed: string;\r\n  token: string;\r\n  isAdmin: boolean;\r\n  teamId: number;\r\n};\r\n\r\nconst RunnersTable: React.FC<Props> = ({ teamId }) => {\r\n  const [runners, setRunners] = React.useState<Runner[]>([]);\r\n\r\n  const loadRunners = async () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    const res = await axios.get(\"/api/v1/teams/\" + teamId + \"/runners\", {\r\n      headers: { Authorization: \"Bearer \" + token },\r\n    });\r\n    const runnersData = res.data as Runner[];\r\n    setRunners(runnersData);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadRunners();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col\">\r\n      <div className=\"flex w-full justify-between items-center\">\r\n        <h1 className=\"text-2xl font-medium\">Runners</h1>\r\n        <a\r\n          className=\"border border-gray-500 bg-gray-200 px-2 py-1 rounded-md font-medium\"\r\n          href=\"http://stage-planner.localhost\"\r\n          target=\"_blank\"\r\n        >\r\n          <i className=\"fa fa-list text-sm mr-1\"></i> Stage Planner\r\n        </a>\r\n      </div>\r\n      <div className=\"flex flex-col w-full border border-gray-500 mt-3\">\r\n        <div className=\"flex border-b border-gray-500\">\r\n          <div className=\"flex-1 border-r border-gray-500 px-2 py-1 font-medium\">\r\n            First Name\r\n          </div>\r\n          <div className=\"flex-1 border-r border-gray-500 px-2 py-1 font-medium\">\r\n            Last Name\r\n          </div>\r\n          <div className=\"flex-1 border-r border-gray-500 px-2 py-1 font-medium\">\r\n            Speed\r\n          </div>\r\n          <div className=\"flex-1 border-r border-gray-500 px-2 py-1 font-medium\">\r\n            Token\r\n          </div>\r\n          <div className=\"w-[8vw] border-gray-500 px-2 py-1 font-medium\">\r\n            Actions\r\n          </div>\r\n        </div>\r\n\r\n        {runners.map((runner, index) => {\r\n          return <TableRow key={index} runner={runner} />;\r\n        })}\r\n\r\n        {runners.length < 10 && <InsertRow teamId={teamId} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunnersTable;\r\n","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\ManageTeam\\index.tsx",["96","97"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport ConfirmationWindow from \"./ConfirmationWindow\";\r\n\r\ntype Team = {\r\n  id: number;\r\n  name: string;\r\n  contactEmail: string;\r\n  location: string;\r\n  plannedStartingTime: string;\r\n  startingTime: string | null;\r\n};\r\n\r\ntype Props = {\r\n  showConfirmationWindow: boolean;\r\n  setShowConfirmationWindow: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst ManageTeam: React.FC<Props> = ({\r\n  showConfirmationWindow,\r\n  setShowConfirmationWindow,\r\n}) => {\r\n  const [teamId, setTeamId] = React.useState<number>(-1);\r\n\r\n  const [originalTeamData, setOriginalTeamData] = React.useState<Team | null>();\r\n\r\n  const [teamName, setTeamName] = React.useState<string>(\"\");\r\n  const teamNameChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setTeamName(e.currentTarget.value);\r\n  };\r\n  const [contactEmail, setContactEmail] = React.useState<string>(\"\");\r\n  const contactEmailChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setContactEmail(e.currentTarget.value);\r\n  };\r\n  const [location, setLocation] = React.useState<string>(\"\");\r\n  const locationChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setLocation(e.currentTarget.value);\r\n  };\r\n\r\n  const [inputChanged, setInputChanged] = React.useState<boolean>(false);\r\n  React.useEffect(() => {\r\n    if (originalTeamData) {\r\n      if (\r\n        originalTeamData.name === teamName &&\r\n        originalTeamData.contactEmail === contactEmail &&\r\n        originalTeamData.location === location\r\n      ) {\r\n        setInputChanged(false);\r\n      } else {\r\n        setInputChanged(true);\r\n      }\r\n    }\r\n  }, [teamName, contactEmail, location]);\r\n\r\n  const loadTeamData = async () => {\r\n    const token = localStorage.getItem(\"token\");\r\n\r\n    const res = await axios.get(\"/api/v1/me\", {\r\n      headers: { Authorization: \"Bearer \" + token },\r\n    });\r\n    const team = res.data.team;\r\n    setOriginalTeamData(team);\r\n    setTeamId(team.id);\r\n    setTeamName(team.name);\r\n    setContactEmail(team.contactEmail);\r\n    setLocation(team.location);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    loadTeamData();\r\n  }, []);\r\n\r\n  const handleSave = async () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    try {\r\n      await axios.put(\r\n        `/api/v1/teams/${teamId}`,\r\n        {\r\n          name: teamName,\r\n          contactEmail,\r\n          location,\r\n        },\r\n        { headers: { Authorization: \"Bearer \" + token } }\r\n      );\r\n\r\n      alert(\"The team's data has been updated.\");\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[20vw] h-[29vh] flex flex-col\">\r\n      <h1 className=\"text-2xl font-medium mb-4\">Manage your team</h1>\r\n      <label htmlFor=\"teamName\">Team name</label>\r\n      <input\r\n        className=\"border border-gray-500 rounded-md pl-2 py-1\"\r\n        type=\"text\"\r\n        value={teamName}\r\n        onChange={teamNameChanged}\r\n        id=\"teamName\"\r\n        aria-label=\"teamName\"\r\n      />\r\n      <label className=\"mt-1\" htmlFor=\"contactEmail\">\r\n        Contact email\r\n      </label>\r\n      <input\r\n        className=\"border border-gray-500 rounded-md pl-2 py-1\"\r\n        type=\"text\"\r\n        value={contactEmail}\r\n        onChange={contactEmailChanged}\r\n        id=\"contactEmail\"\r\n        aria-label=\"contactEmail\"\r\n      />\r\n      <label className=\"mt-1\" htmlFor=\"location\">\r\n        Location\r\n      </label>\r\n      <input\r\n        className=\"border border-gray-500 rounded-md pl-2 py-1\"\r\n        type=\"text\"\r\n        value={location}\r\n        onChange={locationChanged}\r\n        id=\"location\"\r\n        aria-label=\"location\"\r\n      />\r\n\r\n      <div className=\"flex w-full justify-end mt-3 space-x-2\">\r\n        <button\r\n          className=\"rounded-md bg-red-200 px-2 py-1 border border-red-500 font-medium\"\r\n          onClick={() => setShowConfirmationWindow(true)}\r\n        >\r\n          Delete team\r\n        </button>\r\n        {inputChanged ? (\r\n          <button\r\n            className=\"rounded-md bg-gray-200 px-2 py-1 border border-gray-500 font-medium\"\r\n            onClick={handleSave}\r\n          >\r\n            Save\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"rounded-md bg-gray-200 px-2 py-1 border border-gray-500 font-medium text-gray-300\"\r\n            onClick={handleSave}\r\n            disabled\r\n          >\r\n            Save\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageTeam;\r\n","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\InsertRow.tsx",["98"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { Runner } from \".\";\r\n\r\ntype Props = {\r\n  teamId: number;\r\n};\r\n\r\nconst InsertRow: React.FC<Props> = ({ teamId }) => {\r\n  const [firstName, setFirstName] = React.useState<string>(\"\");\r\n  const firstNameChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setFirstName(e.currentTarget.value);\r\n  };\r\n  const [lastName, setLastName] = React.useState<string>(\"\");\r\n  const lastNameChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setLastName(e.currentTarget.value);\r\n  };\r\n  const [speed, setSpeed] = React.useState<string>(\"\");\r\n  const speedChanged = (e: React.FormEvent<HTMLInputElement>) => {\r\n    setSpeed(e.currentTarget.value);\r\n  };\r\n  const handleAdd = async () => {\r\n    if (!firstName || !lastName || !speed) {\r\n      alert(\"Please fill in all fields.\");\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem(\"token\");\r\n    try {\r\n      await axios.post(\r\n        \"/api/v1/teams/\" + teamId + \"/runners\",\r\n        { firstName, lastName, speed },\r\n        {\r\n          headers: {\r\n            Authorization: \"Bearer \" + token,\r\n          },\r\n        }\r\n      );\r\n\r\n      alert(\"A new runner has been created.\");\r\n      window.location.reload();\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex\">\r\n      <div className=\"flex-1 border-r border-gray-500 px-2 py-1\">\r\n        <input\r\n          type=\"text\"\r\n          aria-label=\"firstName\"\r\n          className=\"border border-gray-500 px-2 py-1 w-full rounded\"\r\n          value={firstName}\r\n          onChange={firstNameChanged}\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 border-r border-gray-500 px-2 py-1\">\r\n        <input\r\n          type=\"text\"\r\n          aria-label=\"lastName\"\r\n          className=\"border border-gray-500 px-2 py-1 w-full rounded\"\r\n          value={lastName}\r\n          onChange={lastNameChanged}\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 border-r border-gray-500 px-2 py-1\">\r\n        <input\r\n          type=\"text\"\r\n          aria-label=\"speed\"\r\n          className=\"border border-gray-500 px-2 py-1 w-full rounded\"\r\n          value={speed}\r\n          onChange={speedChanged}\r\n        />\r\n      </div>\r\n      <div className=\"flex-1 border-r border-gray-500 px-2 py-1\" />\r\n\r\n      <div className=\"w-[8vw] flex justify-end items-center px-4\">\r\n        <button\r\n          className=\"text-sm rounded-full p-2 flex items-center justify-center bg-gray-200\"\r\n          aria-label=\"add\"\r\n          onClick={handleAdd}\r\n        >\r\n          <i className=\"fa fa-plus\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InsertRow;\r\n","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\ManageTeam\\ConfirmationWindow.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\team-admin.src\\src\\pages\\Home\\RunnersTable\\TableRow.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\index.tsx",[],[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\App.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\components\\Header.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\common\\providers\\DataProvider.tsx",["99"],[],"import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { ReactNode, useEffect, useState } from \"react\";\r\n\r\ntype Team = {\r\n  id: number;\r\n  name: string;\r\n  contactEmail: string;\r\n  location: string;\r\n  plannedStartingTime: string;\r\n  startingTime: string | null;\r\n};\r\n\r\ntype User = {\r\n  id: number;\r\n  firstName: string;\r\n  lastName: string;\r\n  speed: string;\r\n  token: string;\r\n  isAdmin: boolean;\r\n  teamId: number;\r\n  team: Team;\r\n};\r\n\r\ntype State = \"beforeRace\" | \"beforeStart\" | \"afterStart\";\r\n\r\ntype DataContextType = {\r\n  user: User | null | undefined;\r\n  currentState: State | null;\r\n  timeUntilEvent: number;\r\n};\r\n\r\nconst DataContext = React.createContext<DataContextType>({} as DataContextType);\r\n\r\nconst DataProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null | undefined>();\r\n  const [currentState, setCurrentState] = useState<State | null>(null);\r\n  const [timeUntilEvent, setTimeUntilEvent] = useState<number>(-1);\r\n\r\n  const checkToken = async () => {\r\n    const params = new URLSearchParams(document.location.search);\r\n    const token = params.get(\"token\") || localStorage.getItem(\"token\");\r\n    if (!token) {\r\n      setUser(null);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await axios.post(\"/api/v1/login\", { token });\r\n    } catch (err) {\r\n      localStorage.removeItem(\"token\");\r\n      setUser(null);\r\n      return;\r\n    }\r\n\r\n    localStorage.setItem(\"token\", token);\r\n\r\n    try {\r\n      const res = await axios.get(\"/api/v1/me\", {\r\n        headers: { Authorization: \"Bearer \" + token },\r\n      });\r\n      setUser(res.data);\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const checkCurrentState = async () => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const fakeDate = params.get(\"fakeDate\");\r\n    const currentDate = fakeDate ? new Date(fakeDate) : new Date();\r\n    const startDate = new Date(user?.team.plannedStartingTime || \"\");\r\n\r\n    const diffTime = Math.abs(Number(startDate) - Number(currentDate));\r\n    setTimeUntilEvent(diffTime);\r\n\r\n    if (currentDate < startDate) {\r\n      setCurrentState(\"beforeStart\");\r\n      return;\r\n    }\r\n\r\n    const currentYear = currentDate.getFullYear();\r\n    const currentMonth = currentDate.getMonth();\r\n    const currentDay = currentDate.getDate();\r\n    const startYear = startDate.getFullYear();\r\n    const startMonth = startDate.getMonth();\r\n    const startDay = startDate.getDate();\r\n\r\n    if (\r\n      currentYear === startYear &&\r\n      currentMonth === startMonth &&\r\n      currentDay === startDay\r\n    ) {\r\n      if (user?.team.startingTime === null) {\r\n        setCurrentState(\"beforeRace\");\r\n      } else {\r\n        setCurrentState(\"afterStart\");\r\n      }\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (user) {\r\n      checkCurrentState();\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    checkToken();\r\n  }, []);\r\n\r\n  return (\r\n    <DataContext.Provider value={{ user, currentState, timeUntilEvent }}>\r\n      {children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DataContext;\r\n\r\nexport { DataProvider };\r\n","C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\common\\hooks\\useData.ts",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\BeforeStart.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\BeforeRace.tsx",[],[],"C:\\Projects\\[Web]\\[WS2024]\\3-[Döntő]\\www\\runner-app.src\\src\\states\\AfterStart.tsx",["100"],[],"import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport useData from \"../common/hooks/useData\";\r\nimport { NextRun, Runner, Stage } from \"./BeforeRace\";\r\n\r\ntype CurrentRunner = {\r\n  runner: Runner;\r\n  stage: Stage;\r\n  scheduleDifference: number;\r\n};\r\n\r\nconst AfterStart = () => {\r\n  const { user } = useData();\r\n\r\n  const [currentRunner, setCurrentRunner] = useState<\r\n    CurrentRunner | null | undefined\r\n  >();\r\n\r\n  const updateCurrentRunner = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const res = await axios.get(\"/api/v1/currentRunner\", {\r\n        headers: { Authorization: \"Bearer \" + token },\r\n      });\r\n      if (res.data.finished) {\r\n        setCurrentRunner(null);\r\n      } else {\r\n        setCurrentRunner(res.data as CurrentRunner);\r\n      }\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const [nextRun, setNextRun] = useState<NextRun | null | undefined>();\r\n  const updateNextRunner = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      const res = await axios.get(\"/api/v1/nextRun\", {\r\n        headers: { Authorization: \"Bearer \" + token },\r\n      });\r\n      if (res.data.finished) {\r\n        setNextRun(null);\r\n      } else {\r\n        setNextRun(res.data as NextRun);\r\n      }\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateCurrentRunner();\r\n    updateNextRunner();\r\n\r\n    setInterval(() => {\r\n      updateCurrentRunner();\r\n      updateNextRunner();\r\n    }, 5000);\r\n  }, []);\r\n\r\n  const [timeUntilHandover, setTimeUntilHandover] = useState<{\r\n    hours: string;\r\n    minutes: string;\r\n    seconds: string;\r\n  }>();\r\n\r\n  const [currentInterval, setCurrentInterval] = useState(\r\n    setInterval(() => {}, 1000)\r\n  );\r\n\r\n  useEffect(() => {\r\n    clearInterval(currentInterval);\r\n\r\n    if (nextRun?.plannedStartTime) {\r\n      const interval = setInterval(() => {\r\n        const currentDate = new Date();\r\n        const handoverDate = new Date(nextRun.plannedStartTime);\r\n\r\n        const diffMs = Math.abs(Number(handoverDate) - Number(currentDate));\r\n        const hours = Math.floor(diffMs / 1000 / 60 / 60);\r\n        const minutes = Math.floor((diffMs / 1000 / 60) % 60);\r\n        const seconds = Math.floor((diffMs / 1000) % 60);\r\n\r\n        const hoursFormatted = hours < 10 ? \"0\" + hours : hours;\r\n        const minutesFormatted = minutes < 10 ? \"0\" + minutes : minutes;\r\n        const secondsFormatted = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n        // DEBUG\r\n        // console.log(\r\n        //   nextRun?.plannedStartTime,\r\n        //   hoursFormatted,\r\n        //   minutesFormatted,\r\n        //   secondsFormatted\r\n        // );\r\n\r\n        setTimeUntilHandover({\r\n          hours: String(hoursFormatted),\r\n          minutes: String(minutesFormatted),\r\n          seconds: String(secondsFormatted),\r\n        });\r\n      }, 1000);\r\n      setCurrentInterval(interval);\r\n    }\r\n  }, [nextRun?.plannedStartTime]);\r\n\r\n  if (nextRun === undefined || currentRunner === undefined) return null;\r\n\r\n  const scheduleAhead = currentRunner\r\n    ? currentRunner?.scheduleDifference < 0\r\n    : false;\r\n  const scheduleDifference = Math.abs(currentRunner?.scheduleDifference || 0);\r\n  const scheduleDiffHours = Math.floor(scheduleDifference / 60 / 60);\r\n  const scheduleDiffMinutes = Math.floor((scheduleDifference / 60) % 60);\r\n  const scheduleDiffSeconds = Math.floor(scheduleDifference % 60);\r\n  const scheduleDiffHoursFormatted =\r\n    scheduleDiffHours < 10 ? \"0\" + scheduleDiffHours : scheduleDiffHours;\r\n  const scheduleDiffMinutesFormatted =\r\n    scheduleDiffMinutes < 10 ? \"0\" + scheduleDiffMinutes : scheduleDiffMinutes;\r\n  const scheduleDiffSecondsFormatted =\r\n    scheduleDiffSeconds < 10 ? \"0\" + scheduleDiffSeconds : scheduleDiffSeconds;\r\n\r\n  const nextRunStartHours = new Date(\r\n    nextRun?.plannedStartTime || \"\"\r\n  ).getHours();\r\n  const nextRunStartMinutes = new Date(\r\n    nextRun?.plannedStartTime || \"\"\r\n  ).getMinutes();\r\n  const nextRunStartHoursFormatted =\r\n    nextRunStartHours < 10 ? \"0\" + nextRunStartHours : nextRunStartHours;\r\n  const nextRunStartMinutesFormatted =\r\n    nextRunStartMinutes < 10 ? \"0\" + nextRunStartMinutes : nextRunStartMinutes;\r\n\r\n  const nextRunFinishHours = new Date(\r\n    nextRun?.plannedFinishTime || \"\"\r\n  ).getHours();\r\n  const nextRunFinishMinutes = new Date(\r\n    nextRun?.plannedFinishTime || \"\"\r\n  ).getMinutes();\r\n  const nextRunFinishHoursFormatted =\r\n    nextRunFinishHours < 10 ? \"0\" + nextRunFinishHours : nextRunFinishHours;\r\n  const nextRunFinishMinutesFormatted =\r\n    nextRunFinishMinutes < 10\r\n      ? \"0\" + nextRunFinishMinutes\r\n      : nextRunFinishMinutes;\r\n\r\n  const handoverNowStart = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      await axios.post(\r\n        \"/api/v1/handover/start\",\r\n        {\r\n          stageId: nextRun?.stage.id,\r\n        },\r\n        { headers: { Authorization: \"Bearer \" + token } }\r\n      );\r\n      updateCurrentRunner();\r\n      updateNextRunner();\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n      return;\r\n    }\r\n  };\r\n\r\n  const handoverNowFinish = async () => {\r\n    try {\r\n      const token = localStorage.getItem(\"token\");\r\n      await axios.post(\r\n        \"/api/v1/handover/finish\",\r\n        {\r\n          stageId: nextRun?.stage.id,\r\n        },\r\n        { headers: { Authorization: \"Bearer \" + token } }\r\n      );\r\n      updateCurrentRunner();\r\n      updateNextRunner();\r\n    } catch (err) {\r\n      alert(\"Unknown error occured.\");\r\n      return;\r\n    }\r\n  };\r\n\r\n  if (currentRunner) {\r\n    return (\r\n      <>\r\n        {/* current runner informations */}\r\n        <span className=\"font-bold text-lg\">Current runner</span>\r\n        <div className=\"w-full bg-gradient-to-r from-pink to-purple-2 rounded-2xl flex flex-col px-6 text-white py-5 space-y-3 mt-2\">\r\n          <span className=\"text-xl font-medium\">\r\n            <i className=\"far fa-user mr-4\"></i>{\" \"}\r\n            {currentRunner.runner.firstName} {currentRunner.runner.lastName}\r\n          </span>\r\n          <div className=\"flex items-center\">\r\n            <span className=\"text-xl font-medium mr-4\">\r\n              <i className=\"far fa-map\"></i> {/* missing map-marker icon */}\r\n            </span>\r\n            <div className=\"flex flex-col mr-4\">\r\n              <span>{currentRunner.stage.startingLocation}</span>\r\n              <span>{currentRunner.stage.arrivalLocation}</span>\r\n            </div>\r\n            <span className=\"border-l border-white pl-3\">\r\n              {currentRunner.stage.distance} km\r\n            </span>\r\n          </div>\r\n          <div className=\"flex items-center\">\r\n            <span className=\"text-xl font-medium\">\r\n              <i className=\"far fa-clock mr-4\"></i>\r\n            </span>\r\n            <div className=\"flex flex-col\">\r\n              <span className=\"text-xl font-medium\">\r\n                {scheduleDiffHoursFormatted}:{scheduleDiffMinutesFormatted}:\r\n                {scheduleDiffSecondsFormatted}\r\n              </span>\r\n              {scheduleDifference !== 0 && (\r\n                <span className=\"text-sm\">\r\n                  {scheduleAhead ? \"ahead\" : \"behind\"} of schedule\r\n                </span>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {nextRun ? (\r\n          <>\r\n            {/* time until next run */}\r\n            {currentRunner.runner.id !== user?.id && (\r\n              <>\r\n                <span className=\"mt-2 text-lg font-bold text-gray-2\">\r\n                  Your next {nextRun.stage.distance} km run 🏃\r\n                </span>\r\n                {timeUntilHandover && (\r\n                  <span className=\"text-blue-1 text-lg font-medium\">\r\n                    {timeUntilHandover?.hours}:{timeUntilHandover?.minutes}:\r\n                    {timeUntilHandover?.seconds} UNTIL HANDOVER\r\n                  </span>\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {/* stages */}\r\n            <div className=\"mt-4 w-full bg-gray-1 rounded-2xl flex flex-col px-5 py-4\">\r\n              <span className=\"font-bold text-xl\">\r\n                {nextRun.stage.startingLocation}\r\n              </span>\r\n              <div className=\"w-full flex justify-between items-center mt-4 mb-6\">\r\n                <span className=\"px-4 py-1 rounded-3xl border border-blue-1 text-blue-1 text-lg font-medium\">\r\n                  <i className=\"far fa-user mr-3\"></i>\r\n                  {nextRun.previousRunner?.firstName || user?.firstName}{\" \"}\r\n                  {nextRun.previousRunner?.lastName || user?.lastName}\r\n                </span>\r\n\r\n                <span className=\"font-extrabold text-3xl self-center\">\r\n                  {nextRunStartHoursFormatted}:{nextRunStartMinutesFormatted}\r\n                </span>\r\n              </div>\r\n\r\n              {currentRunner.runner.id !== user?.id && nextRun.canStart ? (\r\n                <button\r\n                  className=\"bg-blue-1 w-full text-white py-2 rounded-3xl font-medium text-lg\"\r\n                  onClick={handoverNowStart}\r\n                >\r\n                  <i className=\"far fa-check-circle mr-2\"></i> Handover now\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"bg-gray-200 w-full text-gray-400 py-2 rounded-3xl font-medium text-lg\"\r\n                  disabled\r\n                >\r\n                  <i className=\"far fa-check-circle mr-2\"></i> Handover now\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"mt-3 w-full bg-gray-1 rounded-2xl flex flex-col px-5 py-4\">\r\n              <span className=\"font-bold text-xl\">\r\n                {nextRun.stage.arrivalLocation}\r\n              </span>\r\n\r\n              <div className=\"w-full flex justify-between items-center mt-4 mb-6\">\r\n                <span className=\"font-extrabold text-3xl self-center\">\r\n                  {nextRunFinishHoursFormatted}:{nextRunFinishMinutesFormatted}\r\n                </span>\r\n                <span className=\"px-4 py-1 rounded-3xl border border-blue-1 text-blue-1 text-lg font-medium\">\r\n                  <i className=\"far fa-user mr-3\"></i>\r\n                  {nextRun.nextRunner.firstName} {nextRun.nextRunner.lastName}\r\n                </span>\r\n              </div>\r\n\r\n              {currentRunner.runner.id === user?.id ? (\r\n                <button\r\n                  className=\"bg-blue-1 w-full text-white py-2 rounded-3xl font-medium text-lg\"\r\n                  onClick={handoverNowFinish}\r\n                >\r\n                  <i className=\"far fa-check-circle mr-2\"></i> Handover now\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className=\"bg-gray-200 w-full text-gray-400 py-2 rounded-3xl font-medium text-lg\"\r\n                  disabled\r\n                >\r\n                  <i className=\"far fa-check-circle mr-2\"></i> Handover now\r\n                </button>\r\n              )}\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <span className=\"font-bold mt-3 text-lg\">You are done!</span>\r\n            <img src=\"images/finish.svg\" alt=\"finish\" />\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"rounded-2xl bg-gradient-to-r from-pink to-purple-2 text-white py-4 px-6 text-2xl font-medium\">\r\n        Race finished!\r\n      </div>\r\n      <span className=\"mt-3 font-bold text-lg\">\r\n        You are done! Congratulation!\r\n      </span>\r\n      <img src=\"images/finish.svg\" alt=\"finish\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AfterStart;\r\n",{"ruleId":"101","severity":1,"message":"102","line":34,"column":6,"nodeType":"103","endLine":34,"endColumn":8,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":40,"column":9,"nodeType":"107","messageId":"108","endLine":44,"endColumn":10,"fix":"109"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":26},{"ruleId":"101","severity":1,"message":"114","line":53,"column":6,"nodeType":"103","endLine":53,"endColumn":40,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"116","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":16},{"ruleId":"101","severity":1,"message":"117","line":107,"column":6,"nodeType":"103","endLine":107,"endColumn":12,"suggestions":"118"},{"ruleId":"101","severity":1,"message":"119","line":107,"column":6,"nodeType":"103","endLine":107,"endColumn":33,"suggestions":"120"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'loadRunners'. Either include it or remove the dependency array.","ArrayExpression",["121"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"122","text":"123"},"@typescript-eslint/no-unused-vars","'ConfirmationWindow' is defined but never used.","Identifier","unusedVar","React Hook React.useEffect has a missing dependency: 'originalTeamData'. Either include it or remove the dependency array.",["124"],"'Runner' is defined but never used.","React Hook React.useEffect has a missing dependency: 'checkCurrentState'. Either include it or remove the dependency array.",["125"],"React Hook useEffect has a missing dependency: 'currentInterval'. Either include it or remove the dependency array.",["126"],{"desc":"127","fix":"128"},[1187,1187]," rel=\"noreferrer\"",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [loadRunners]",{"range":"135","text":"136"},"Update the dependencies array to be: [teamName, contactEmail, location, originalTeamData]",{"range":"137","text":"138"},"Update the dependencies array to be: [checkCurrentState, user]",{"range":"139","text":"140"},"Update the dependencies array to be: [currentInterval, nextRun.plannedStartTime]",{"range":"141","text":"142"},[821,823],"[loadRunners]",[1634,1668],"[teamName, contactEmail, location, originalTeamData]",[2891,2897],"[checkCurrentState, user]",[3061,3088],"[currentInterval, nextRun.plannedStartTime]"]